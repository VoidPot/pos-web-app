// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // mongodb
  url      = env("DATABASE_PRISMA_URL")
}

enum ACCOUNT_TYPE {
  BUSINESS
  CUSTOMER
}

model Account {
  id            Int          @id @default(autoincrement())
  firstName     String
  lastName      String?
  username      String       @default(uuid())
  email         String?
  phone         String?
  type          ACCOUNT_TYPE @default(CUSTOMER)
  password      String?
  salt          String?
  googleAuthId  String?
  emailVerified Boolean      @default(false)
  phoneVerified Boolean      @default(false)

  image        Image?        @relation(fields: [imageId], references: [id])
  imageId      Int?          @unique
  addresses    Address[]
  connections  Connection[]
  activityLogs ActivityLog[]

  deleted   Boolean   @default(false)
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([username, type])
  @@unique([email, type])
}

model Connection {
  id       Int             @id @default(autoincrement())
  role     CONNECTION_ROLE @default(OTHER)
  passcode String?         @default("000000")

  account   Account @relation(fields: [accountId], references: [id])
  accountId Int
  store     Store   @relation(fields: [storeId], references: [id])
  storeId   Int

  deleted   Boolean   @default(false)
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([accountId, storeId])
}

enum CONNECTION_ROLE {
  ADMIN
  MANAGER
  BILLER
  KITCHEN
  OTHER
}

model Store {
  id     Int     @id @default(autoincrement())
  name   String
  deck   String?
  slug   String  @unique
  email  String?
  phone  String?
  tables Int     @default(0)

  addresses   Address      @relation(fields: [addressId], references: [id])
  addressId   Int
  categories  Category[]
  products    Product[]
  connections Connection[]
  items       Item[]
  bills       Bill[]

  deleted   Boolean   @default(false)
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Address {
  id       Int     @id @default(autoincrement())
  line1    String
  line2    String?
  state    String
  county   String
  pincode  String
  position Int     @default(1)

  account   Account? @relation(fields: [accountId], references: [id])
  accountId Int?
  stores    Store[]

  deleted   Boolean   @default(false)
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Image {
  id       Int        @id @default(autoincrement())
  caption  String?
  altText  String?
  content  String
  type     IMAGE_TYPE @default(PUBLIC)
  position Int        @default(1)

  categories Category[]
  product    Product?   @relation(fields: [productId], references: [id])
  productId  Int?
  account    Account?

  deleted   Boolean   @default(false)
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum IMAGE_TYPE {
  BASE64
  PUBLIC
  S3
  PATH
  URL
  COLOR
}

model Category {
  id   Int     @id @default(autoincrement())
  name String
  deck String?

  image    Image?    @relation(fields: [imageId], references: [id])
  imageId  Int?
  store    Store     @relation(fields: [storeId], references: [id])
  storeId  Int
  products Product[]

  deleted   Boolean   @default(false)
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id         Int     @id @default(autoincrement())
  name       String
  deck       String?
  price      Float   @default(0)
  outOfStock Boolean @default(false)

  image      Image[]
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  store      Store    @relation(fields: [storeId], references: [id])
  storeId    Int
  items      Item[]

  deleted   Boolean   @default(false)
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id     Int               @id @default(autoincrement())
  type   ORDER_TYPE        @default(TAKE_AWAY)
  status ORDER_ITEM_STATUS @default(PENDING)
  table  Int               @default(0)

  items        Item[]
  bills        Bill[]
  activityLogs ActivityLog[]

  deleted   Boolean   @default(false)
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum ORDER_TYPE {
  PICK_UP
  TAKE_AWAY
  DINING
  PRE_DINING
  DELIVERY
  PLATFORM
}

model ActivityLog {
  id      Int  @id @default(autoincrement())
  content Json @default("{}")

  type      LOG_TYPE @default(DEFAULT)
  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   Int?
  account   Account? @relation(fields: [accountId], references: [id])
  accountId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LOG_TYPE {
  DEFAULT
  ORDER_STATUS_UPDATE
}

model Item {
  id       Int               @id @default(autoincrement())
  title    String?
  note     String?
  price    Float             @default(0)
  quantity Int               @default(0)
  total    Float             @default(0)
  position Int               @default(0)
  interval Int               @default(0)
  status   ORDER_ITEM_STATUS @default(PENDING)

  product   Product @relation(fields: [productId], references: [id])
  productId Int
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  bill      Bill?   @relation(fields: [billId], references: [id])
  billId    Int?
  store     Store   @relation(fields: [storeId], references: [id])
  storeId   Int

  deleted   Boolean   @default(false)
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum ORDER_ITEM_STATUS {
  PENDING
  ACCEPTED
  PREPARING
  READY
  OUT_FOR_DELIVERY
  DELIVERED
}

model Bill {
  id             Int          @id @default(autoincrement())
  totalPrice     Float        @default(0)
  taxAmount      Float        @default(0)
  stateTaxAmount Float        @default(0)
  packagingFee   Float        @default(0)
  deliveryFee    Float        @default(0)
  grandTotal     Float        @default(0)
  note           String       @default("")
  billedAt       DateTime     @default(now())
  printedAt      DateTime?
  paidAt         DateTime?
  paidBy         BILL_PAID_BY @default(WALLET)
  orderType      ORDER_TYPE   @default(TAKE_AWAY)

  items   Item[]
  order   Order  @relation(fields: [orderId], references: [id])
  orderId Int
  store   Store  @relation(fields: [storeId], references: [id])
  storeId Int

  deleted   Boolean   @default(false)
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum BILL_PAID_BY {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  UPI
  WALLET
  DUE
}

// Discount in product as fixed and percentage type with value
